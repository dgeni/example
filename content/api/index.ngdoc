@ngdoc overview
@name API Reference
@description

# AngularJS API Docs
Welcome to the AngularJS API docs page. These pages contain the AngularJS reference materials for version <strong ng-bind="version"></strong>.

The documentation is organized into **{@link guide/module modules}** which contain various components of an AngularJS application.
These components are {@link guide/directive directives}, {@link guide/dev_guide.services services}, {@link guide/filter filters}, {@link guide/providers providers}, {@link guide/templates types}, global APIs and testing mocks.

<div class="alert alert-info">
**Angular Namespaces `$` and `$$`**

To prevent accidental name collisions with your code,
Angular prefixes names of public objects with `$` and names of private objects with `$$`.
Please do not use the `$` or `$$` prefix in your code.
</div>

## Angular Namespace


## {@link module:ng ng (core module)}
This module is provided by default and contains the core components of AngularJS.

<table class="definition-table spaced">
  <tr>
    <td>{@link #directive Directives}</td>
    <td>
      <p>
        This is the core collection of directives you would use in your template code to build an AngularJS application.
      </p>

      <p>
        Some examples include:
          {@link directive:ngClick ngClick},
          {@link directive:ngInclude ngInclude},
          {@link directive:ngRepeat ngRepeat},
          etc… <br />
      </p>
    </td>
  </tr>
  <tr>
    <td>
      {@link #service Services / Factories}
    </td>
    <td>
      <p>
        This is the core collection of services which are used within the DI of your application.
      </p>
      <p>
        Some examples include:
          {@link $compile $compile},
          {@link $http $http},
          {@link module:ngRoute.$routeParams $routeParams},
          {@link $location $location},
          etc…
      <p>
    </td>
  </tr>
  <tr>
    <td>
      {@link #filter Filters}
    </td>
    <td>
      <p>
        The core filters available in the ng module are used to transform template data before it is renders within directives and expressions.
      </p>
      <p>
        Some examples include:
          {@link filter:filter filter},
          {@link filter:date date},
          {@link filter:currency currency},
          {@link filter:lowercase lowercase},
          {@link filter:uppercase uppercase},
            etc...
      </p>
    </td>
  </tr>
  <tr>
    <td>
      {@link #function Global APIs}
    </td>
    <td>
      <p>
        The core global API functions are attached to the angular object. These core functions are useful for low level JavaScript operations within your application.
      </p>
      <p>
        Some examples include:
        {@link function:angular.copy angular.copy()},
        {@link function:angular.equals angular.equals()},
        {@link function:angular.element angular.element()},
          etc...
      </p>
    </td>
  </tr>
</table>


## {@link module:ngRoute ngRoute}

Use ngRoute to enable URL routing to your application. The ngRoute module supports URL management via both hashbang and HTML5 pushState.

<div class="alert alert-info">Include the **angular-route.js** file and set **ngRoute** as a dependency for this to work in your application.</div>

<table class="definition-table spaced">
  <tr>
    <td>
      {@link module:ngRoute#service Services / Factories}
    </td>
    <td>
      The following services are used for route management:
      <ul>
        <li>{@link module:ngRoute.$routeParams $routeParams} is used to access the querystring values present in the URL.</li>
        <li>{@link module:ngRoute.$route $route} is used to access the details of the route that is currently being accessed.</li>
        <li>{@link module:ngRoute.$routeProvider $routeProvider} is used to register routes for the application.</li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>
      {@link module:ngRoute#directive Directives}
    </td>
    <td>
      The {@link module:ngRoute.directive:ngView ngView} directive will display the template of the current route within the page.
    </td>
  </tr>
</table>


## {@link module:ngAnimate ngAnimate}

Use ngAnimate to enable animation features into your application. Various core ng directives will provide
animation hooks into your application when ngAnimate is included. Animations are defined by using CSS transitions/animations
or JavaScript callbacks.

<div class="alert alert-info">Include the **angular-animate.js** file and set **ngAnimate** as a dependency for this to work in your application.</div>

<table class="definition-table spaced">
  <tr>
    <td>
      {@link module:ngAnimate#service Services / Factories}
    </td>
    <td>
      Use {@link module:ngAnimate.$animate $animate} to trigger animation operations within your directive code.
    </td>
  </tr>
  <tr>
    <td>
      {@link module:ngAnimate CSS-based animations}
    </td>
    <td>
      Follow ngAnimate’s CSS naming structure to reference CSS transitions / keyframe animations in AngularJS. Once defined the animation can be triggered by referencing the CSS class within the HTML template code.
    </td>
  </tr>
  <tr>
    <td>
      {@link module:ngAnimate JS-based animations}
    </td>
    <td>
      Use {@link angular.Module#animation module.animation()} to register a JavaScript animation. Once registered the animation can be triggered by referencing the CSS class within the HTML template code.
    </td>
  </tr>
</table>


## {@link module:ngResource ngResource}

Use the ngResource module when querying and posting data to a REST API.

<div class="alert alert-info">Include the **angular-resource.js** file and set **ngResource** as a dependency for this to work in your application.</div>

<table class="definition-table spaced">
  <tr>
    <td>
      {@link module:ngResource#service Services / Factories}
    </td>
    <td>
      The {@link module:ngResource.$resource $resource} service is used to define RESTful objects which communicate with a REST API.
    </td>
  </tr>
</table>

## {@link module:ngCookies ngCookies}

Use the ngCookies module to handle cookie management within your application.

<div class="alert alert-info">Include the **angular-cookies.js** file and set **ngCookies** as a dependency for this to work in your application.</div>

<table class="definition-table spaced">
  <tr>
    <td>
      {@link module:ngCookies#service Services / Factories}
    </td>
    <td>
      The following services are used for cookie management:
      <ul>
        <li>The {@link module:ngCookies.$cookies $cookie} service is a convenient wrapper to store simple data within browser cookies.</li>
        <li>{@link module:ngCookies.$cookieStore $cookieStore} is used to store more complex data using serialization.</li>
      </ul>
    </td>
  </tr>
</table>

## {@link module:ngTouch ngTouch}

Use ngTouch when developing for mobile browsers/devices.

<div class="alert alert-info">Include the **angular-touch.js** file and set **ngTouch** as a dependency for this to work in your application.</div>

<table class="definition-table spaced">
  <tr>
    <td>
      {@link module:ngTouch#service Services / Factories}
    </td>
    <td>
      The {@link module:ngTouch.$swipe $swipe} service is used to register and manage mobile DOM events. 
    </td>
  </tr>
  <tr>
    <td>
      {@link module:ngTouch#directive Directives}
    </td>
    <td>
      Various directives are available in ngTouch to emulate mobile DOM events.
    </td>
  </tr>
</table>

## {@link module:ngSanitize ngSanitize}

Use ngSanitize to securely parse and manipulate HTML data in your application.

<div class="alert alert-info">Include the **angular-sanitize.js** file and set **ngSanitize** as a dependency for this to work in your application.</div>

<table class="definition-table spaced">
  <tr>
    <td>
      {@link module:ngSanitize#service Services / Factories}
    </td>
    <td>
      The {@link module:ngSanitize.$sanitize $sanitize} service is used to clean up dangerous HTML code in a quick and convenient way.
    </td>
  </tr>
  <tr>
    <td>
      {@link module:ngTouch#filter Filters}
    </td>
    <td>
      The {@link module:ngSanitize.filter:linky linky filter} is used to turn URLs into HTML links within the provided string.
    </td>
  </tr>
</table>

## {@link module:ngMock ngMock}

Use ngMock to inject and mock modules, factories, services and providers within your unit tests 

<div class="alert alert-info">Include the **angular-mocks.js** file into your test runner for this to work.</div>

<table class="definition-table spaced">
  <tr>
    <td>
      {@link module:ngMock#service Services / Factories}
    </td>
    <td>
      <p>
        ngMock will extend the behavior of various core services to become testing aware and manageable in a synchronous manner.
      <p>

      <p>
        Some examples include:
          {@link module:ngMock.$timeout $timeout},
          {@link module:ngMock.$interval $interval},
          {@link module:ngMock.$log $log},
          {@link module:ngMock.$httpBackend $httpBackend},
          etc...
      <p>
    </td>
  </tr>
  <tr>
    <td>
      {@link module:ngMock#function Global APIs}
    </td>
    <td>
      <p>
        Various helper functions are available to inject and mock modules within unit test code.
      </p>

      <p>
        Some examples
          {@link module:ngMock.angular.mock.inject inject()},
          {@link module:ngMock.angular.mock.module module()},
          {@link module:ngMock.angular.mock.dump dump()},
          etc...
      <p>
    </td>
  </tr>
</table>
